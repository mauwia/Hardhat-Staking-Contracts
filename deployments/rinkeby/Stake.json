{
  "address": "0xA419868ebF8cC516490fd60c25229B27263846d2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeedAddess",
          "type": "address"
        },
        {
          "internalType": "contract Token",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Stake__NoStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stake__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stake__WithdrawFail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "calculateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateOn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xee0cfb0451405ed83dd21d48c7f8b121c12743c35b3a08776b9fb0465d73df72",
  "receipt": {
    "to": null,
    "from": "0xCD02feDc82139DfD5F638D3bBB753c109B90b553",
    "contractAddress": "0xA419868ebF8cC516490fd60c25229B27263846d2",
    "transactionIndex": 4,
    "gasUsed": "1034669",
    "logsBloom": "0x
    "blockHash": "0xac5956fdca0af3eaf4ee349415bce96995bd98fb549eb7852b42b0fb4325c593",
    "transactionHash": "0xee0cfb0451405ed83dd21d48c7f8b121c12743c35b3a08776b9fb0465d73df72",
    "logs": [],
    "blockNumber": 11355386,
    "cumulativeGasUsed": "1438780",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e",
    "0x79DA5f274348fbCE51df6e9c9776C1D6F908d69E"
  ],
  "numDeployments": 2,
  "solcInputHash": "c4c796af82bb4ae74bc74435eb517d43",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddess\",\"type\":\"address\"},{\"internalType\":\"contract Token\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Stake__NoStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stake__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stake__WithdrawFail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stake.sol\":\"Stake\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/stake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface Token {\\n    function mint(uint256 amount, address receiver) external;\\n\\n    function decimals() external view returns (uint8);\\n}\\nerror Stake__NotEnoughEthEntered();\\nerror Stake__NoStakeAmount();\\nerror Stake__WithdrawFail();\\n\\ncontract Stake {\\n    uint8 private immutable i_APY = 10;\\n    struct Stakes {\\n        uint256 totalStake;\\n        uint256 reward;\\n        uint256 lastUpdateOn;\\n    }\\n    mapping(address => Stakes) public stakes;\\n\\n    Token public token;\\n    AggregatorV3Interface internal priceFeed;\\n\\n    constructor(address _priceFeedAddess, Token _tokenAddress) {\\n        token = _tokenAddress;\\n        priceFeed = AggregatorV3Interface(_priceFeedAddess);\\n    }\\n\\n    function stake() public payable {\\n        if (stakes[msg.sender].totalStake + msg.value < 0.01 ether) {\\n            revert Stake__NotEnoughEthEntered();\\n        }\\n\\n        if (stakes[msg.sender].totalStake > 0) {\\n            stakes[msg.sender].reward += calculateReward();\\n        }\\n\\n        stakes[msg.sender].totalStake += msg.value;\\n        stakes[msg.sender].lastUpdateOn = block.timestamp;\\n    }\\n\\n    function calculateReward() public view returns (uint) {\\n        uint256 period = (block.timestamp - stakes[msg.sender].lastUpdateOn);\\n        (, int price, , , ) = priceFeed.latestRoundData();\\n        // int price = 3000 * (10 ** 8);\\n        uint8 priceFeedDecimals = priceFeed.decimals();\\n        uint8 rewardTokenDecimals = token.decimals();\\n        uint8 stakeCurrencyDecimals = 18;\\n        assert(price > 0);\\n\\n        uint256 rewardPerSecond = ((stakes[msg.sender].totalStake / 100) *\\n            i_APY) / 365 days;\\n        uint256 reward = rewardPerSecond * period;\\n        uint256 rewardInRewardToken = reward * uint256(price);\\n        uint256 decimals = stakeCurrencyDecimals +\\n            priceFeedDecimals -\\n            rewardTokenDecimals;\\n\\n        return rewardInRewardToken / (10**decimals);\\n    }\\n\\n    function withdraw() public {\\n        if (stakes[msg.sender].totalStake < 0) {\\n            revert Stake__NoStakeAmount();\\n        }\\n        stakes[msg.sender].reward += calculateReward();\\n\\n        uint256 balance = stakes[msg.sender].totalStake;\\n        stakes[msg.sender].totalStake = 0;\\n        (bool successStakeWithdraw, ) = msg.sender.call{value: balance}(\\\"\\\");\\n        if (!successStakeWithdraw) {\\n            revert Stake__WithdrawFail();\\n        }\\n        uint256 reward = stakes[msg.sender].reward;\\n        stakes[msg.sender].reward = 0;\\n        token.mint(reward, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xc0d4857fcd7c55436f8196ed9cca3940ec7dd03647c21666f0a39d5bab2ad12f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600a60ff1660809060ff168152503480156200001f57600080fd5b50604051620012be380380620012be83398181016040528101906200004591906200017e565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001c5565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010182620000d4565b9050919050565b6200011381620000f4565b81146200011f57600080fd5b50565b600081519050620001338162000108565b92915050565b60006200014682620000f4565b9050919050565b620001588162000139565b81146200016457600080fd5b50565b60008151905062000178816200014d565b92915050565b60008060408385031215620001985762000197620000cf565b5b6000620001a88582860162000122565b9250506020620001bb8582860162000167565b9150509250929050565b6080516110dd620001e1600039600061089401526110dd6000f3fe60806040526004361061004a5760003560e01c806316934fc41461004f5780633a4b66f11461008e5780633ccfd60b14610098578063725cedd3146100af578063fc0c546a146100da575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610a07565b610105565b60405161008593929190610a4d565b60405180910390f35b61009661012f565b005b3480156100a457600080fd5b506100ad610306565b005b3480156100bb57600080fd5b506100c4610632565b6040516100d19190610a84565b60405180910390f35b3480156100e657600080fd5b506100ef61097e565b6040516100fc9190610afe565b60405180910390f35b60006020528060005260406000206000915090508060000154908060010154908060020154905083565b662386f26fc10000346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546101849190610b48565b10156101bc576040517f3e27c3f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411156102665761020e610632565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461025e9190610b48565b925050819055505b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546102b79190610b48565b92505081905550426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015610382576040517f7382c30800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61038a610632565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546103da9190610b48565b9250508190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161049490610bcf565b60006040518083038185875af1925050503d80600081146104d1576040519150601f19603f3d011682016040523d82523d6000602084013e6104d6565b606091505b5050905080610511576040517f406ee08000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394bf804d82336040518363ffffffff1660e01b81526004016105fb929190610bf3565b600060405180830381600087803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b50505050505050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154426106829190610c1c565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610cf4565b5050509150506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561079657600080fd5b505afa1580156107aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ce9190610da8565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561083a57600080fd5b505afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190610da8565b90506000601290506000841361088b5761088a610dd5565b5b60006301e133807f000000000000000000000000000000000000000000000000000000000000000060ff1660646000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109049190610e33565b61090e9190610e64565b6109189190610e33565b9050600086826109289190610e64565b9050600086826109389190610e64565b905060008587866109499190610ebe565b6109539190610ef5565b60ff16905080600a610965919061105c565b826109709190610e33565b995050505050505050505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109d4826109a9565b9050919050565b6109e4816109c9565b81146109ef57600080fd5b50565b600081359050610a01816109db565b92915050565b600060208284031215610a1d57610a1c6109a4565b5b6000610a2b848285016109f2565b91505092915050565b6000819050919050565b610a4781610a34565b82525050565b6000606082019050610a626000830186610a3e565b610a6f6020830185610a3e565b610a7c6040830184610a3e565b949350505050565b6000602082019050610a996000830184610a3e565b92915050565b6000819050919050565b6000610ac4610abf610aba846109a9565b610a9f565b6109a9565b9050919050565b6000610ad682610aa9565b9050919050565b6000610ae882610acb565b9050919050565b610af881610add565b82525050565b6000602082019050610b136000830184610aef565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b5382610a34565b9150610b5e83610a34565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b9357610b92610b19565b5b828201905092915050565b600081905092915050565b50565b6000610bb9600083610b9e565b9150610bc482610ba9565b600082019050919050565b6000610bda82610bac565b9150819050919050565b610bed816109c9565b82525050565b6000604082019050610c086000830185610a3e565b610c156020830184610be4565b9392505050565b6000610c2782610a34565b9150610c3283610a34565b925082821015610c4557610c44610b19565b5b828203905092915050565b600069ffffffffffffffffffff82169050919050565b610c6f81610c50565b8114610c7a57600080fd5b50565b600081519050610c8c81610c66565b92915050565b6000819050919050565b610ca581610c92565b8114610cb057600080fd5b50565b600081519050610cc281610c9c565b92915050565b610cd181610a34565b8114610cdc57600080fd5b50565b600081519050610cee81610cc8565b92915050565b600080600080600060a08688031215610d1057610d0f6109a4565b5b6000610d1e88828901610c7d565b9550506020610d2f88828901610cb3565b9450506040610d4088828901610cdf565b9350506060610d5188828901610cdf565b9250506080610d6288828901610c7d565b9150509295509295909350565b600060ff82169050919050565b610d8581610d6f565b8114610d9057600080fd5b50565b600081519050610da281610d7c565b92915050565b600060208284031215610dbe57610dbd6109a4565b5b6000610dcc84828501610d93565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e3e82610a34565b9150610e4983610a34565b925082610e5957610e58610e04565b5b828204905092915050565b6000610e6f82610a34565b9150610e7a83610a34565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eb357610eb2610b19565b5b828202905092915050565b6000610ec982610d6f565b9150610ed483610d6f565b92508260ff03821115610eea57610ee9610b19565b5b828201905092915050565b6000610f0082610d6f565b9150610f0b83610d6f565b925082821015610f1e57610f1d610b19565b5b828203905092915050565b60008160011c9050919050565b6000808291508390505b6001851115610f8057808604811115610f5c57610f5b610b19565b5b6001851615610f6b5780820291505b8081029050610f7985610f29565b9450610f40565b94509492505050565b600082610f995760019050611055565b81610fa75760009050611055565b8160018114610fbd5760028114610fc757610ff6565b6001915050611055565b60ff841115610fd957610fd8610b19565b5b8360020a915084821115610ff057610fef610b19565b5b50611055565b5060208310610133831016604e8410600b841016171561102b5782820a90508381111561102657611025610b19565b5b611055565b6110388484846001610f36565b9250905081840481111561104f5761104e610b19565b5b81810290505b9392505050565b600061106782610a34565b915061107283610a34565b925061109f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610f89565b90509291505056fea2646970667358221220b2e989112222e5534d328925a3ec47971e3e416eecdcb9c9f5c4d3e2d1286a4764736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c806316934fc41461004f5780633a4b66f11461008e5780633ccfd60b14610098578063725cedd3146100af578063fc0c546a146100da575b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610a07565b610105565b60405161008593929190610a4d565b60405180910390f35b61009661012f565b005b3480156100a457600080fd5b506100ad610306565b005b3480156100bb57600080fd5b506100c4610632565b6040516100d19190610a84565b60405180910390f35b3480156100e657600080fd5b506100ef61097e565b6040516100fc9190610afe565b60405180910390f35b60006020528060005260406000206000915090508060000154908060010154908060020154905083565b662386f26fc10000346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546101849190610b48565b10156101bc576040517f3e27c3f600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411156102665761020e610632565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461025e9190610b48565b925050819055505b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546102b79190610b48565b92505081905550426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015610382576040517f7382c30800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61038a610632565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546103da9190610b48565b9250508190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161049490610bcf565b60006040518083038185875af1925050503d80600081146104d1576040519150601f19603f3d011682016040523d82523d6000602084013e6104d6565b606091505b5050905080610511576040517f406ee08000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166394bf804d82336040518363ffffffff1660e01b81526004016105fb929190610bf3565b600060405180830381600087803b15801561061557600080fd5b505af1158015610629573d6000803e3d6000fd5b50505050505050565b6000806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154426106829190610c1c565b90506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156106ee57600080fd5b505afa158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610cf4565b5050509150506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561079657600080fd5b505afa1580156107aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ce9190610da8565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561083a57600080fd5b505afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190610da8565b90506000601290506000841361088b5761088a610dd5565b5b60006301e133807f000000000000000000000000000000000000000000000000000000000000000060ff1660646000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546109049190610e33565b61090e9190610e64565b6109189190610e33565b9050600086826109289190610e64565b9050600086826109389190610e64565b905060008587866109499190610ebe565b6109539190610ef5565b60ff16905080600a610965919061105c565b826109709190610e33565b995050505050505050505090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109d4826109a9565b9050919050565b6109e4816109c9565b81146109ef57600080fd5b50565b600081359050610a01816109db565b92915050565b600060208284031215610a1d57610a1c6109a4565b5b6000610a2b848285016109f2565b91505092915050565b6000819050919050565b610a4781610a34565b82525050565b6000606082019050610a626000830186610a3e565b610a6f6020830185610a3e565b610a7c6040830184610a3e565b949350505050565b6000602082019050610a996000830184610a3e565b92915050565b6000819050919050565b6000610ac4610abf610aba846109a9565b610a9f565b6109a9565b9050919050565b6000610ad682610aa9565b9050919050565b6000610ae882610acb565b9050919050565b610af881610add565b82525050565b6000602082019050610b136000830184610aef565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b5382610a34565b9150610b5e83610a34565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b9357610b92610b19565b5b828201905092915050565b600081905092915050565b50565b6000610bb9600083610b9e565b9150610bc482610ba9565b600082019050919050565b6000610bda82610bac565b9150819050919050565b610bed816109c9565b82525050565b6000604082019050610c086000830185610a3e565b610c156020830184610be4565b9392505050565b6000610c2782610a34565b9150610c3283610a34565b925082821015610c4557610c44610b19565b5b828203905092915050565b600069ffffffffffffffffffff82169050919050565b610c6f81610c50565b8114610c7a57600080fd5b50565b600081519050610c8c81610c66565b92915050565b6000819050919050565b610ca581610c92565b8114610cb057600080fd5b50565b600081519050610cc281610c9c565b92915050565b610cd181610a34565b8114610cdc57600080fd5b50565b600081519050610cee81610cc8565b92915050565b600080600080600060a08688031215610d1057610d0f6109a4565b5b6000610d1e88828901610c7d565b9550506020610d2f88828901610cb3565b9450506040610d4088828901610cdf565b9350506060610d5188828901610cdf565b9250506080610d6288828901610c7d565b9150509295509295909350565b600060ff82169050919050565b610d8581610d6f565b8114610d9057600080fd5b50565b600081519050610da281610d7c565b92915050565b600060208284031215610dbe57610dbd6109a4565b5b6000610dcc84828501610d93565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e3e82610a34565b9150610e4983610a34565b925082610e5957610e58610e04565b5b828204905092915050565b6000610e6f82610a34565b9150610e7a83610a34565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eb357610eb2610b19565b5b828202905092915050565b6000610ec982610d6f565b9150610ed483610d6f565b92508260ff03821115610eea57610ee9610b19565b5b828201905092915050565b6000610f0082610d6f565b9150610f0b83610d6f565b925082821015610f1e57610f1d610b19565b5b828203905092915050565b60008160011c9050919050565b6000808291508390505b6001851115610f8057808604811115610f5c57610f5b610b19565b5b6001851615610f6b5780820291505b8081029050610f7985610f29565b9450610f40565b94509492505050565b600082610f995760019050611055565b81610fa75760009050611055565b8160018114610fbd5760028114610fc757610ff6565b6001915050611055565b60ff841115610fd957610fd8610b19565b5b8360020a915084821115610ff057610fef610b19565b5b50611055565b5060208310610133831016604e8410600b841016171561102b5782820a90508381111561102657611025610b19565b5b611055565b6110388484846001610f36565b9250905081840481111561104f5761104e610b19565b5b81810290505b9392505050565b600061106782610a34565b915061107283610a34565b925061109f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610f89565b90509291505056fea2646970667358221220b2e989112222e5534d328925a3ec47971e3e416eecdcb9c9f5c4d3e2d1286a4764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82,
        "contract": "contracts/stake.sol:Stake",
        "label": "stakes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Stakes)77_storage)"
      },
      {
        "astId": 85,
        "contract": "contracts/stake.sol:Stake",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Token)61"
      },
      {
        "astId": 88,
        "contract": "contracts/stake.sol:Stake",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(Token)61": {
        "encoding": "inplace",
        "label": "contract Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Stakes)77_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Stake.Stakes)",
        "numberOfBytes": "32",
        "value": "t_struct(Stakes)77_storage"
      },
      "t_struct(Stakes)77_storage": {
        "encoding": "inplace",
        "label": "struct Stake.Stakes",
        "members": [
          {
            "astId": 72,
            "contract": "contracts/stake.sol:Stake",
            "label": "totalStake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 74,
            "contract": "contracts/stake.sol:Stake",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 76,
            "contract": "contracts/stake.sol:Stake",
            "label": "lastUpdateOn",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}